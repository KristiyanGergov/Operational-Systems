Програма за симулиране на клиент и сървър.

Стъпки, които изпълнява клиента при стартиране:

1) Валидира подадения input, като за да е коректен, трябва да бъде предоставен един единствен аргумент - индексът на акаунта му, който е буква от A-H.

2) Инициализира семафорите както и споделенята памет, като при неуспешна инициализация програмата спира и връща код за грешка -1.
Първоначално се отваря само един семафор до осъществяването на връзката със сървъра. След това всичко се отварят.

3) Създава модел (User), който ще пази информация за транзакциите за отделните клиенти.

4) Започва първата транзакция, която е въвеждането на клиентския идентификатор (accId), като за целта изпраща сигнал до notify_sem,
семафорът и след това изчаква отговор от сървъра, че прочитането на данните е било успешно.

5) Ако успешно прочете баланса на потребителя, продължава към втората транзакция, която е и по съществената - внасянето или теглене на пари.
В противен случай (при неуспех) освобождава mutex-a и програмата завършва с код за грешка.

6) След въвеждането на число се изпраща сигнал до сървъра, който трябва да валидира новоподадения input и ако е валиден да изчисли новата
стойност на сметката на потребителя, както и да set-не result-a, което представлява дали дадената транзакция е била успешна или не.

7) При успешна транзакция клиента освобождава mutex-a

Общата идея на това, което се опитах да направя е, валидацията на само първия вход на клиента да се случва при клиента, за
да не се създава излишен connection със сървърва. След това вече, като така или иначе сме осъществили конекцията цялата логика и
валидация да се случва в сървъра, като клиента само да проверява след всяка конкретна дали всичко е наред, за да знае дали да продължава напред.



source:

    - https://docs.oracle.com/cd/E37838_01/html/E61057/sync-11157.html
    - https://www.geeksforgeeks.org/use-posix-semaphores-c/
    - https://www.geeksforgeeks.org/ipc-shared-memory/